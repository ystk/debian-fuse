From: Jann Horn <jannh@google.com>
Date: Fri, 13 Jul 2018 15:15:36 -0700
Subject: [2/5] fusermount: don't feed "escaped commas" into mount options
Origin: https://github.com/libfuse/libfuse/commit/28bdae3d113ef479c1660a581ef720cdc33bf466
Bug-Debian-Security: https://security-tracker.debian.org/tracker/CVE-2018-10906
Bug: https://github.com/libfuse/libfuse/pull/268

The old code permits the following behavior:

$ _FUSE_COMMFD=10000 priv_strace -etrace=mount -s200 fusermount -o 'foobar=\,allow_other' mount
mount("/dev/fuse", ".", "fuse", MS_NOSUID|MS_NODEV, "foobar=\\,allow_other,fd=3,rootmode=40000,user_id=1000,group_id=1000") = -1 EINVAL (Invalid argument)

However, backslashes do not have any special meaning for the kernel here.

As it happens, you can't abuse this because there is no FUSE mount option
that takes a string value that can contain backslashes; but this is very
brittle. Don't interpret "escape characters" in places where they don't
work.
---
 util/fusermount.c | 5 ++++-
 1 file changed, 4 insertions(+), 1 deletion(-)

Index: fuse-2.9.3/util/fusermount.c
===================================================================
--- fuse-2.9.3.orig/util/fusermount.c	2018-08-06 14:46:08.263826098 +0200
+++ fuse-2.9.3/util/fusermount.c	2018-08-06 14:46:08.251826099 +0200
@@ -28,6 +28,7 @@
 #include <sys/socket.h>
 #include <sys/utsname.h>
 #include <sched.h>
+#include <stdbool.h>
 
 #define FUSE_COMMFD_ENV		"_FUSE_COMMFD"
 
@@ -755,8 +756,10 @@
 		unsigned len;
 		const char *fsname_str = "fsname=";
 		const char *subtype_str = "subtype=";
+		bool escape_ok = begins_with(s, fsname_str) ||
+				 begins_with(s, subtype_str);
 		for (len = 0; s[len]; len++) {
-			if (s[len] == '\\' && s[len + 1])
+			if (escape_ok && s[len] == '\\' && s[len + 1])
 				len++;
 			else if (s[len] == ',')
 				break;
